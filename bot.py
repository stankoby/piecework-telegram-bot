import os, sqlite3, logging, io, csv, threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from datetime import datetime, timedelta
from dateutil.tz import gettz
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
TIMEZONE = os.getenv("TIMEZONE", "Europe/Moscow")  # –ø—Ä–∏–º–µ—Ä IANA: Asia/Novosibirsk
DB_FILE = os.getenv("DB_FILE", "piecework.db")
ADMIN_IDS = set(map(int, filter(None, os.getenv("ADMIN_IDS", "").split(","))))  # —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
ADMIN_USERNAMES = set(u.lstrip("@").lower() for u in filter(None, os.getenv("ADMIN_USERNAMES", "").split(",")))

# ---------- –õ–ï–ì–ö–ò–ô HEALTH HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ----------
def start_health_server():
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç."""
    class Handler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"OK")
        def log_message(self, *args, **kwargs):
            return  # –≥–ª—É—à–∏–º –ª–æ–≥–∏

    port = int(os.getenv("PORT", "10000"))  # Render –∑–∞–¥–∞—ë—Ç PORT
    srv = HTTPServer(("0.0.0.0", port), Handler)
    t = threading.Thread(target=srv.serve_forever, daemon=True)
    t.start()
    logging.info(f"Health server started on port {port}")

# ---------- –ë–î (SQLite) ----------
def db():
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = db()
    cur = conn.cursor()
    cur.execute("""create table if not exists rates(
        product text primary key,
        rate real not null
    )""")
    cur.execute("""create table if not exists logs(
        id integer primary key autoincrement,
        ts text not null,
        user_id integer not null,
        username text,
        full_name text,
        product text not null,
        qty integer not null,
        rate real not null,
        amount real not null,
        work_date text not null
    )""")
    conn.commit()
    conn.close()

def seed_default_rates():
    """–ê–≤—Ç–æ–∑–∞—Å–µ–≤ —Ä–∞—Å—Ü–µ–Ω–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–∞–ø—Å–µ—Ä—Ç–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è)."""
    defaults = [
        ("–û—á–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ (–ø–ª–µ–Ω–∫–∞)", 5.0),
        ("–û—á–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ (–ø–∞–∫–µ—Ç)", 3.0),
        ("–û—á–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ (–ø–ª–µ–Ω–∫–∞)", 6.0),
        ("–û—á–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ (–ø–∞–∫–µ—Ç)", 3.0),
        ("–ë–µ—Ä—É—à–∏ (3 —à—Ç)", 3.0),
        ("–ë–µ—Ä—É—à–∏ (10 —à—Ç)", 5.0),
        ("–†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä—ã (3-5 —à—Ç)", 4.0),
        ("–†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä—ã (10 —à—Ç –≤ –ø–∞–∫–µ—Ç–∏–∫–∞—Ö)", 6.0),
        ("–†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä—ã –≤ –∫–æ—Ä–æ–±–æ—á–∫–∞—Ö (10 —à—Ç)", 10.0),
        ("–ü–µ—Ä—á–∞—Ç–∫–∏", 3.0),
        ("–ö—Ä–µ–º", 3.0),
        ("–ö—Ä–∞–≥–∏", 4.0),
        ("–ù–∞—É—à–Ω–∏–∫–∏", 4.0),
    ]
    conn = db(); cur = conn.cursor()
    cur.executemany(
        "insert into rates(product, rate) values(?, ?) "
        "on conflict(product) do update set rate=excluded.rate",
        defaults
    )
    conn.commit(); conn.close()
    logging.info("Default rates seeded.")

def get_rates():
    conn = db(); cur = conn.cursor()
    cur.execute("select product, rate from rates order by product")
    r = {row["product"]: float(row["rate"]) for row in cur.fetchall()} if cur else {}
    conn.close()
    return r

def set_rate(product, rate):
    conn = db(); cur = conn.cursor()
    cur.execute("insert into rates(product, rate) values(?,?) on conflict(product) do update set rate=excluded.rate", (product, rate))
    conn.commit(); conn.close()

def add_log(u, product, qty, rate, amount, ts, wdate):
    conn = db(); cur = conn.cursor()
    cur.execute("""insert into logs(ts,user_id,username,full_name,product,qty,rate,amount,work_date)
                   values(?,?,?,?,?,?,?,?,?)""",
                (ts, u.id, u.username or "", f"{u.first_name or ''} {u.last_name or ''}".strip(),
                 product, qty, rate, amount, wdate))
    conn.commit(); conn.close()

def sum_period(user_id, dfrom, dto):
    conn = db(); cur = conn.cursor()
    cur.execute("""select coalesce(sum(amount),0) as s from logs
                   where work_date between ? and ? and user_id=?""",
                (dfrom, dto, user_id))
    val = float(cur.fetchone()["s"] or 0.0)
    conn.close()
    return val

def week_export_rows(monday, today):
    conn = db(); cur = conn.cursor()
    cur.execute("""select user_id, full_name, sum(amount) as total
                   from logs
                   where work_date between ? and ?
                   group by user_id, full_name
                   order by total desc""", (monday, today))
    rows = cur.fetchall(); conn.close()
    return rows

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
ASK_QTY = 1
def tznow(): return datetime.now(gettz(TIMEZONE))
def main_kb():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("‚ûï –ó–∞–ø–∏—Å–∞—Ç—å –æ–±—ä—ë–º")],
         [KeyboardButton("üìä –ò—Ç–æ–≥ –∑–∞ –¥–µ–Ω—å"), KeyboardButton("üìà –ò—Ç–æ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é")]],
        resize_keyboard=True
    )
def product_kb(rates):
    btns, row = [], []
    items = sorted(rates.items(), key=lambda x: x[0])
    for i, (name, rate) in enumerate(items, start=1):
        row.append(InlineKeyboardButton(f"{name} ({rate:g}‚ÇΩ)", callback_data=f"prod|{name}"))
        if i % 2 == 0: btns.append(row); row=[]
    if row: btns.append(row)
    btns.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(btns)

def is_admin(user_id, username=None):
    u = (username or "").lower().lstrip("@")
    if ADMIN_IDS or ADMIN_USERNAMES:
        return (user_id in ADMIN_IDS) or (u in ADMIN_USERNAMES)
    return True  # –µ—Å–ª–∏ –∞–¥–º–∏–Ω–æ–≤ –Ω–µ —É–∫–∞–∑–∞–ª–∏ ‚Äî –≤—Å–µ –º–æ–≥—É—Ç

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–¥–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã. –ù–∞–∂–º–∏ ¬´‚ûï –ó–∞–ø–∏—Å–∞—Ç—å –æ–±—ä—ë–º¬ª.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /rates /day /week /export /setrate /backup",
        reply_markup=main_kb()
    )

async def rates_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    rates = get_rates()
    if not rates:
        await update.message.reply_text("–†–∞—Å—Ü–µ–Ω–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    text = "–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏:\n" + "\n".join(f"‚Ä¢ {k}: {v:g}‚ÇΩ" for k,v in sorted(rates.items()))
    await update.message.reply_text(text)

async def setrate_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id, update.effective_user.username):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏.")
        return
    parts = (update.message.text or "").split(maxsplit=2)
    if len(parts) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrate <–ù–∞–∑–≤–∞–Ω–∏–µ> <–°—Ç–∞–≤–∫–∞>")
        return
    product, rate_str = parts[1], parts[2].replace(",", ".")
    try:
        rate = float(rate_str)
        set_rate(product, rate)
        await update.message.reply_text(f"‚úÖ –°—Ç–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {product} = {rate:g}‚ÇΩ")
    except ValueError:
        await update.message.reply_text("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

async def ask_product(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    rates = get_rates()
    ctx.user_data["rates"] = rates
    if not rates:
        await update.message.reply_text("–ï—â–µ –Ω–µ—Ç —Ä–∞—Å—Ü–µ–Ω–æ–∫. –ê–¥–º–∏–Ω: /setrate <—Ç–æ–≤–∞—Ä> <—Å—Ç–∞–≤–∫–∞>")
        return ConversationHandler.END
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é:", reply_markup=product_kb(rates))
    return ASK_QTY

async def choose_product(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    if q.data == "cancel":
        await q.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ."); return ConversationHandler.END
    _, product = q.data.split("|", 1)
    ctx.user_data["product"] = product
    await q.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{product}*\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):", parse_mode="Markdown")
    return ASK_QTY

async def input_qty(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    t = (update.message.text or "").strip()
    if not t.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 25"); return ASK_QTY
    qty = int(t)
    product = ctx.user_data.get("product")
    rates = ctx.user_data.get("rates") or get_rates()
    rate = float(rates.get(product, 0))
    amount = qty * rate
    now = tznow()
    add_log(update.effective_user, product, qty, rate, amount,
            now.isoformat(), now.date().isoformat())
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {product} √ó {qty} = {amount:g}‚ÇΩ (—Å—Ç–∞–≤–∫–∞ {rate:g}‚ÇΩ)\n"
        f"–î–∞—Ç–∞: {now.strftime('%d.%m.%Y %H:%M')}",
        reply_markup=main_kb()
    )
    ctx.user_data.pop("product", None)
    return ConversationHandler.END

async def day_total(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    d = tznow().date().isoformat()
    total = sum_period(update.effective_user.id, d, d)
    await update.message.reply_text(f"üìä –ò—Ç–æ–≥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total:g}‚ÇΩ")

async def week_total(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    today = tznow().date()
    monday = today - timedelta(days=today.weekday())
    total = sum_period(update.effective_user.id, monday.isoformat(), today.isoformat())
    await update.message.reply_text(
        f"üìà –ò—Ç–æ–≥ –∑–∞ –Ω–µ–¥–µ–ª—é (—Å {monday.strftime('%d.%m')} –ø–æ {today.strftime('%d.%m')}): {total:g}‚ÇΩ"
    )

async def export_csv(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    today = tznow().date()
    monday = today - timedelta(days= today.weekday())
    rows = week_export_rows(monday.isoformat(), today.isoformat())
    buf = io.StringIO()
    w = csv.writer(buf, delimiter=';')
    w.writerow(["user_id","full_name","total_amount"])
    for r in rows:
        w.writerow([r["user_id"], r["full_name"], f'{r["total"]:.2f}'])
    data = buf.getvalue().encode("utf-8")
    fname = f"export_{monday.isoformat()}_{today.isoformat()}.csv"
    await update.message.reply_document(document=data, filename=fname, caption="–≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –Ω–µ–¥–µ–ª—é")

async def backup_db(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id, update.effective_user.username):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."); return
    with open(DB_FILE, "rb") as f:
        await update.message.reply_document(InputFile(f, filename=DB_FILE), caption="–ë—ç–∫–∞–ø –ë–î")

async def text_router(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    t = (update.message.text or "").strip()
    if t.startswith("‚ûï"): return await ask_product(update, ctx)
    if t.startswith("üìä"): return await day_total(update, ctx)
    if t.startswith("üìà"): return await week_total(update, ctx)
    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /start /day /week /rates /export")

def build_app():
    logging.basicConfig(level=logging.INFO)
    init_db()
    seed_default_rates()  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rates", rates_cmd))
    app.add_handler(CommandHandler("setrate", setrate_cmd))
    app.add_handler(CommandHandler("day", day_total))
    app.add_handler(CommandHandler("week", week_total))
    app.add_handler(CommandHandler("export", export_csv))
    app.add_handler(CommandHandler("backup", backup_db))

    conv = ConversationHandler(
        entry_points=[CommandHandler("log", ask_product),
                      MessageHandler(filters.Regex("^‚ûï"), ask_product)],
        states={
            ASK_QTY: [
                CallbackQueryHandler(choose_product, pattern=r"^prod\|"),
                CallbackQueryHandler(choose_product, pattern=r"^cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_qty),
            ],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(choose_product, pattern=r"^(prod\|.*|cancel)$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))
    return app

if __name__ == "__main__":
    if not BOT_TOKEN:
        raise RuntimeError("Set BOT_TOKEN env var.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º health HTTP-–ø–æ—Ä—Ç, —á—Ç–æ–±—ã Render –ø—Ä–æ—à—ë–ª port-scan
    start_health_server()

    # Python 3.14: —è–≤–Ω–æ —Å–æ–∑–¥–∞—ë–º event loop
    import asyncio
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.run_until_complete(build_app().run_polling())
